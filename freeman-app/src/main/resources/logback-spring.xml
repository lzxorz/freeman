<?xml version="1.0" encoding="UTF-8"?>
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
    <include resource="org/springframework/boot/logging/logback/base.xml" />
    <logger name="org.springframework.web" level="INFO"/>
    <logger name="org.springboot.sample" level="TRACE" />
    <contextName>freeman</contextName>
    <!-- 日志存放路径 -->
    <property name="log.path" value="logs" />
    <!-- 日志文件保留天数 15天 -->
    <property name="log.maxHistory" value="15" />
    <!-- 日志输出格式 -->
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - [%method,%line] - %msg%n"/>
    <!-- 日志输出彩色格式 -->
    <property name="log.colorPattern" value="%d{yyyy-MM-dd HH:mm:ss} | %highlight(%-5level) | %boldYellow(%thread) | %boldGreen(%logger) | %msg%n"/>
    <!--
        颜色可选
        "%black", "%red", "%green","%yellow","%blue", "%magenta","%cyan", "%white", "%gray",
        "%boldRed","%boldGreen", "%boldYellow", "%boldBlue", "%boldMagenta","%boldCyan", "%boldWhite" and "%highlight" 。
        例:%red(信息),则 信息 这两个字为红色
        其它 %p 表示level,%t表示线程名
    -->
    <!--输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder><pattern>${log.colorPattern}</pattern><charset>UTF-8</charset></encoder>
    </appender>


    <!--按天生成日志,输出到文件 info -->
    <appender name="file_info"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>${log.path}/info/info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 日志文件保留天数 15天 -->
            <MaxHistory>${log.maxHistory}</MaxHistory>
        </rollingPolicy>
        <encoder><pattern>${log.pattern}</pattern></encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>INFO</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--按天生成日志,输出到文件 error -->
    <appender name="file_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>${log.path}/error/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 日志文件保留天数 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder><pattern>${log.pattern}</pattern></encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>ERROR</level>
            <!-- 如果匹配就记录这条日志(接收) -->
            <onMatch>ACCEPT</onMatch>
            <!-- 如果不匹配就不记录这条日志(拒绝） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 用户访问日志输出 -->
    <appender name="user" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log.path}/user/user.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder><pattern>${log.pattern}</pattern></encoder>
    </appender>

    <!-- level 级别高的优先输出; 日志输出指定及上级的,输出顺序: ERROR>WARN>INFO>DEBUG>TRACE -->
    <!-- logger 指定日志级别 某一个包或者具体的某一个类的日志打印级别以及指定appender  -->
    <!-- root 根logger，也是一种logger，且只有一个level属性 -->


    <!-- 测试环境+开发环境 多个使用逗号隔开 -->
    <!--<springProfile name="test,dev">
        <logger name="com.freeman" level="DEBUG" />
        <logger name="org.springframework" level="WARN" />
    </springProfile>
    &lt;!&ndash; 生产环境 &ndash;&gt;
    <springProfile name="prod">
        <logger name="com.freeman" level="ERROR" />
        <logger name="org.springframework" level="ERROR" />
    </springProfile>-->



    <!--<root level="info">
        <appender-ref ref="console" />
    </root>

   <root level="info">
        <appender-ref ref="file_info" />
        <appender-ref ref="file_error" />
    </root>

    <logger name="user" level="info">
        <appender-ref ref="user"/>
    </logger>-->


</configuration>
